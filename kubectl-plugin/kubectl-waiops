#!/bin/bash

# Â© Copyright IBM Corp. 2020, 2025

# The CP4AIOps status checker tool prints out several components to indicate the status of your install.
# In a successful install, the components below should all have a successful STATUS/PROGRESS/PHASE indicator.
# If any of the components are incomplete or are not reconciled after a significant period of time, 
# please refer to the IBM troubleshooting docs online or open a support case. 

# Various formatting elements
newline='\n\n'
red=$(tput setaf 1)
green=$(tput setaf 2)
blue=$(tput setaf 4)
gray=$(tput setaf 7)
bold=$(tput bold)
normal=$(tput sgr0) #reset color/bolding

PLUGIN=${0##*-}

# helper functions
function printUsage {
  cat <<EOF
Actions for working with IBM CloudPak for AI Ops

Usage:
  oc ${PLUGIN} COMMAND [flags]

Available Commands:
  multizone pods     Print the node topology and pods with zone distribution
  multizone status   Print the node topology and report status

  status             Print the status of the main components in the CloudPak
  status-summary     Print a brief summary status of the CloudPak
  status-upgrade     Print the upgrade status of the components in the CloudPak
  status-all         Print the most detail about the components in the CloudPak

EOF
}

printStatus() {
    if [[ "$1" == "$2" ]];
    then
        if [[ "$4" != "status-summary" ]];
        then
            printf '%s\n\n' "$green$3$normal"
        fi
        return 0
    else
        if [[ "$4" != "status-summary" ]];
        then
            printf '%s\n\n' "$red$3$normal"
        else
            SUMMARY_FAILURE+="${newline}$3"
        fi
        return 1
    fi
}

getCSVStatus () {
    CSV_NAME=$(oc get csvs -o name --no-headers=true -n $1 | grep $2)   
    INSTANCE=$(oc get $CSV_NAME -n $1)                    
    STATUS=$(oc get $CSV_NAME -n $1 -o jsonpath='{.status.phase}')
    printStatus "$STATUS" "Succeeded" "$INSTANCE"
}

getSubscriptionStatus () {
    INSTANCE=$(oc get subscription.operators.coreos.com $1 -n $2)                    
    STATUS=$(oc get subscription.operators.coreos.com $1 -n $2 -o jsonpath='{.status.catalogHealth[].healthy}')
    printStatus "$STATUS" "true" "$INSTANCE"
}

getSubscriptionStatusGrep () {
    SUBSCRIPTION=$(oc get subscription.operators.coreos.com -o name --no-headers=true -n $2 | grep $1)   
    INSTANCE=$(oc get $SUBSCRIPTION -n $2)                    
    STATUS=$(oc get $SUBSCRIPTION -n $2 -o jsonpath='{.status.catalogHealth[].healthy}')
    printStatus "$STATUS" "true" "$INSTANCE"
}

getSubscriptionStatusSelector () {
    INSTANCE=$(oc get subscription.operators.coreos.com --selector=$1 -n $2) 
    STATUS=$(oc get subscription.operators.coreos.com --selector=$1 -n $2 -o jsonpath='{.items[].status.catalogHealth[].healthy}')
    printStatus "$STATUS" "true" "$INSTANCE"
}

getFlinkDeploymentStatus () {
    # Get Installation CR name
    installation_instance=$(oc get installation.orchestrator.aiops.ibm.com -A -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name" --no-headers)
    namespace=$(echo $installation_instance | awk '{print $1}')
    name=$(echo $installation_instance | awk '{print $2}')

    # Programatically get FD deployment for LAD if the module is enabled
    LAD_ENABLED=$(oc get installation.orchestrator.aiops.ibm.com $name -n $namespace -o=jsonpath='{.spec.pakModules[?(@.name=="logAnomalyDetection")].enabled}')
    if [[ "$LAD_ENABLED" == "true" ]]; then
        LAD_INSTANCE=$(oc get flinkdeployment aiops-lad-flink)
        STATUS_FLINKDEP=$(oc get flinkdeployment aiops-lad-flink -o=jsonpath='{.status.lifecycleState}')

        if [[ "$1" == "status-summary" ]];
        then
            printStatus "$STATUS_FLINKDEP" "Running" "$LAD_INSTANCE" "status-summary"
        else
            printStatus "$STATUS_FLINKDEP" "STABLE" "$LAD_INSTANCE"
        fi
    fi

    IR_LC_INSTANCE=$(oc get flinkdeployment aiops-ir-lifecycle-flink)
    STATUS_FLINKDEP=$(oc get flinkdeployment aiops-ir-lifecycle-flink -o=jsonpath='{.status.lifecycleState}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_FLINKDEP" "STABLE" "$IR_LC_INSTANCE" "status-summary"
    else
        printStatus "$STATUS_FLINKDEP" "STABLE" "$IR_LC_INSTANCE"
    fi
}

getOperandRequestStatus () {
    INSTANCE=$(oc get operandrequests $1 -n $2 -o custom-columns="NAMESPACE:metadata.namespace,NAME:metadata.name,PHASE:status.phase,CREATED AT:metadata.creationTimestamp")                    
    STATUS=$(oc get operandrequests $1 -n $2 -o jsonpath='{.status.phase}')
    printStatus "$STATUS" "Running" "$INSTANCE"
}

checkIfSecureTunnelExists() {
    if [[ "$(oc api-resources | grep securetunnel)" == "" ]];
    then 
        SECURE_TUNNEL_EXISTS="false"
    else
        SECURE_TUNNEL_EXISTS="true"
    fi
}

clusterAdminSkipMessage() {
    printf "$gray$1$normal$newline"
}

# functions for status command
getInstallationStatus() {
    # Installation status
    INSTANCE=$(oc get installations.orchestrator.aiops.ibm.com)
    STATUS=$(oc get installations.orchestrator.aiops.ibm.com -o jsonpath='{.items[].status.phase}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS" "Running" "$INSTANCE" "status-summary"
    else
        printStatus "$STATUS" "Running" "$INSTANCE"
    fi
}

getZenServiceStatus() {
    # ZenService status
    INSTANCE=$(oc get zenservice iaf-zen-cpdservice -o custom-columns='KIND:.kind,NAME:.metadata.name,NAMESPACE:.metadata.namespace,VERSION:status.currentVersion,STATUS:.status.zenStatus,PROGRESS:.status.Progress,MESSAGE:.status.ProgressMessage')
    STATUS=$(oc get zenservice iaf-zen-cpdservice -o jsonpath='{.status.zenStatus}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS" "Completed" "$INSTANCE" "status-summary"
    else
        printStatus "$STATUS" "Completed" "$INSTANCE"
    fi
}

getAUICStatus() {
    # AutomationUIConfig status
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        AUIC_INSTANCES=$(oc get automationuiconfig -A --no-headers | while read a b c; do echo "$a $b"; done; 2>/dev/null)
        AUICS=()
        while IFS= read -r line; do
            AUICS+=("$line")
        done <<< "$AUIC_INSTANCES"

        for string in "${AUICS[@]}"; do
            read -r NAMESPACE AUIC <<< "$string"
            INSTANCE_AUIC=$(oc get automationuiconfig -n $NAMESPACE -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
            STATUS_AUIC=$(oc get automationuiconfig $AUIC -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
            if [[ "$1" == "status-summary" ]];
            then
                printStatus "$STATUS_AUIC" "True" "$INSTANCE_AUIC" "status-summary"
            else
                printStatus "$STATUS_AUIC" "True" "$INSTANCE_AUIC"
            fi
        done
    else
        INSTANCE_AUIC=$(oc get automationuiconfig -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
        NAME_AUIC=$(oc get automationuiconfig --no-headers | while read a b c; do echo "$a"; done; 2>/dev/null)
        STATUS_AUIC=$(oc get automationuiconfig $NAME_AUIC -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        if [[ "$1" == "status-summary" ]];
        then
            printStatus "$STATUS_AUIC" "True" "$INSTANCE_AUIC" "status-summary"
        else
            printStatus "$STATUS_AUIC" "True" "$INSTANCE_AUIC"
        fi
    fi
}

getABStatus() {
    # AutomationBase status    
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        AB_INSTANCES=$(oc get automationbase -A --no-headers | while read a b c; do echo "$a $b"; done; 2>/dev/null)
        ABS=()
        while IFS= read -r line; do
            ABS+=("$line")
        done <<< "$AB_INSTANCES"

        for string in "${ABS[@]}"; do
            read -r NAMESPACE AB <<< "$string"
            INSTANCE_AB=$(oc get automationbase -n $NAMESPACE -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
            STATUS_AB=$(oc get automationbase $AB -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
            if [[ "$1" == "status-summary" ]];
            then
                printStatus "$STATUS_AB" "True" "$INSTANCE_AB" "status-summary"
            else
                printStatus "$STATUS_AB" "True" "$INSTANCE_AB"
            fi
        done       
    else
        INSTANCE_AB=$(oc get automationbase -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')    
        NAME_AB=$(oc get automationbase --no-headers | while read a b c; do echo "$a"; done; 2>/dev/null)
        STATUS_AB=$(oc get automationbase $NAME_AB -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        if [[ "$1" == "status-summary" ]];
        then
            printStatus "$STATUS_AB" "True" "$INSTANCE_AB" "status-summary"
        else
            printStatus "$STATUS_AB" "True" "$INSTANCE_AB"
        fi
    fi
}

getCartridgeStatus() {
    # Cartridge status
    INSTANCE_CARTRIDGE=$(oc get cartridge cp4waiops-cartridge -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
    STATUS_CARTRIDGE=$(oc get cartridge cp4waiops-cartridge -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_CARTRIDGE" "True" "$INSTANCE_CARTRIDGE" "status-summary"
    else
        printStatus "$STATUS_CARTRIDGE" "True" "$INSTANCE_CARTRIDGE"
    fi
}

getCartridgeRequirementsStatus() {
    # CartridgeRequirements status
    INSTANCE_CARTRIDGE_REQS=$(oc get cartridgerequirements cp4waiops-cartridge -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
    STATUS_CARTRIDGE_REQS=$(oc get cartridgerequirements cp4waiops-cartridge -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_CARTRIDGE_REQS" "True" "$INSTANCE_CARTRIDGE_REQS" "status-summary"
    else    
        printStatus "$STATUS_CARTRIDGE_REQS" "True" "$INSTANCE_CARTRIDGE_REQS"
    fi
}

getKafkaStatus() {
    # Kafka status
    INSTANCE_KAFKA=$(oc get kafka iaf-system -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.conditions[?(@.type=="Ready")].status')
    STATUS_KAFKA=$(oc get kafka iaf-system -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_KAFKA" "True" "$INSTANCE_KAFKA" "status-summary"
    else    
        printStatus "$STATUS_KAFKA" "True" "$INSTANCE_KAFKA"
    fi
}

getElasticsearchStatus() {
    if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.8" && "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]]; then
        # Elastic status
        INSTANCE_ELASTIC=$(oc get elasticsearches.elastic.automation.ibm.com iaf-system -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.conditions[?(@.type=="Ready")].status')
        STATUS_ELASTIC=$(oc get elasticsearches.elastic.automation.ibm.com iaf-system -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        if [[ "$1" == "status-summary" ]];
        then
            printStatus "$STATUS_ELASTIC" "True" "$INSTANCE_ELASTIC" "status-summary"
        else    
            printStatus "$STATUS_ELASTIC" "True" "$INSTANCE_ELASTIC"
        fi
    else
        INSTANCE_ELASTIC=$(oc get elasticsearchcluster.elasticsearch.opencontent.ibm.com aiops -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.phase')
        STATUS_ELASTIC=$(oc get elasticsearchcluster.elasticsearch.opencontent.ibm.com aiops -o jsonpath='{.status.phase}')
        if [[ "$1" == "status-summary" ]];
        then
            printStatus "$STATUS_ELASTIC" "Ready" "$INSTANCE_ELASTIC" "status-summary"
        else
            printStatus "$STATUS_ELASTIC" "Ready" "$INSTANCE_ELASTIC"
        fi
    fi
}

getIRLifecycleEventProcessorStatus() {
    # aiops-ir-lifecycle EventProcessor status
    INSTANCE_IR_EP=$(oc get eventprocessor aiops-ir-lifecycle -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
    STATUS_IR_EP=$(oc get eventprocessor aiops-ir-lifecycle -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_IR_EP" "True" "$INSTANCE_IR_EP" "status-summary"
    else
        printStatus "$STATUS_IR_EP" "True" "$INSTANCE_IR_EP"
    fi
}

getAIOpsEventProcessorStatus() {
    # cp4waiops-eventprocessor EventProcessor status
    INSTANCE_EP=$(oc get eventprocessor cp4waiops-eventprocessor -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
    STATUS_EP=$(oc get eventprocessor cp4waiops-eventprocessor -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_EP" "True" "$INSTANCE_EP" "status-summary"
    else
        printStatus "$STATUS_EP" "True" "$INSTANCE_EP"
    fi
}

getIRCoreStatus() {
    # IRCore status
    INSTANCE_IRCORE=$(oc get ircore aiops  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
    STATUS_IRCORE=$(oc get ircore aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_IRCORE" "True" "$INSTANCE_IRCORE" "status-summary"
    else
        printStatus "$STATUS_IRCORE" "True" "$INSTANCE_IRCORE"
    fi
}

getAIOpsAnalyticsOrchestratorStatus() {
    # AIOpsAnalyticsOrchestrator status
    INSTANCE_ANALYTICS_ORCHESTRATOR=$(oc get AIOpsAnalyticsOrchestrator aiops  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
    STATUS_ANALYTICS_ORCHESTRATOR=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_ANALYTICS_ORCHESTRATOR" "True" "$INSTANCE_ANALYTICS_ORCHESTRATOR" "status-summary"
    else
        printStatus "$STATUS_ANALYTICS_ORCHESTRATOR" "True" "$INSTANCE_ANALYTICS_ORCHESTRATOR"
    fi
}

getLifecycleServiceStatus() {
    # LifecycleService status
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]];
        then
            INSTANCE=$(oc get lifecycleservice -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Lifecycle Service Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        else
            INSTANCE=$(oc get lifecycleservice -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"LifecycleServiceReady\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        fi
    else    
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]];
        then
            INSTANCE=$(oc get lifecycleservice -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Lifecycle Service Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        else
            INSTANCE=$(oc get lifecycleservice -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"LifecycleServiceReady\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        fi
    fi
    STATUS=$(oc get lifecycleservice aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS" "True" "$INSTANCE" "status-summary"
    else
        printStatus "$STATUS" "True" "$INSTANCE"
    fi
}

getBaseUIStatus() {
    # BaseUI status
    INSTANCE=$(oc get BaseUI baseui-instance -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].status,MESSAGE:status.conditions[?(@.type==\"Ready\")].reason")
    STATUS=$(oc get BaseUI baseui-instance -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS" "True" "$INSTANCE" "status-summary"
    else    
        printStatus "$STATUS" "True" "$INSTANCE"
    fi
}

getAIManagerStatus() {
    # AIManager status
    INSTANCE_AIMANAGER=$(oc get AIManager aimanager -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.phase,MESSAGE:status.message")
    STATUS_AIMANAGER=$(oc get AIManager aimanager -o jsonpath='{.status.phase}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_AIMANAGER" "Completed" "$INSTANCE_AIMANAGER" "status-summary"
    else
        printStatus "$STATUS_AIMANAGER" "Completed" "$INSTANCE_AIMANAGER"
    fi
}

getASMStatus() {
    # ASM status
    INSTANCE_ASM=$(oc get asm aiops-topology -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.phase")
    STATUS_ASM=$(oc get asm aiops-topology -o jsonpath='{.status.phase}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_ASM" "OK" "$INSTANCE_ASM" "status-summary"
    else
        printStatus "$STATUS_ASM" "OK" "$INSTANCE_ASM"
    fi
}

getAIOpsEdgeStatus() {
    # AIOpsEdge status
    INSTANCE_AIOPSEDGE=$(oc get aiopsedge aiopsedge -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
    STATUS_AIOPSEDGE=$(oc get aiopsedge aiopsedge -o jsonpath='{.status.phase}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_AIOPSEDGE" "Configured" "$INSTANCE_AIOPSEDGE" "status-summary"
    else
        printStatus "$STATUS_AIOPSEDGE" "Configured" "$INSTANCE_AIOPSEDGE"
    fi
}

getAIOpsUIStatus() {
    # AIOpsUI status
    INSTANCE_AIOPSUI=$(oc get aiopsui aiopsui-instance -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].status,MESSAGE:status.conditions[?(@.type==\"Ready\")].reason")
    STATUS_AIOPSUI=$(oc get aiopsui aiopsui-instance -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
    if [[ "$1" == "status-summary" ]];
    then
        printStatus "$STATUS_AIOPSUI" "True" "$INSTANCE_AIOPSUI" "status-summary"
    else
        printStatus "$STATUS_AIOPSUI" "True" "$INSTANCE_AIOPSUI"
    fi
}

# the functions below are for status-all
getKongStatus() {
    # Kong status-all
    INSTANCE=$(oc get kong gateway -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:.status.conditions[?(@.type==\"Deployed\")].status,MESSAGE:status.conditions[?(@.type==\"Deployed\")].reason")         
    STATUS=$(oc get kong gateway -o jsonpath='{.status.conditions[].status}')
    printStatus "$STATUS" "True" "$INSTANCE"
}

getVaultDeployStatus() {
    # VaultDeploy status-all
    INSTANCE_VAULTDEPLOY=$(oc get vaultdeploy ibm-vault-deploy -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:metadata.annotations.productVersion,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
    STATUS_VAULTDEPLOY=$(oc get vaultdeploy ibm-vault-deploy -o jsonpath='{.status.conditions[].status}')
    printStatus "$STATUS_VAULTDEPLOY" "True" "$INSTANCE_VAULTDEPLOY"
}

getVaultAccessStatus() {
    # VaultAccess status-all
    INSTANCE_VAULTACCESS=$(oc get vaultaccess ibm-vault-access -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:metadata.annotations.productVersion,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
    STATUS_VAULTACCESS=$(oc get vaultaccess ibm-vault-access -o jsonpath='{.status.conditions[].status}')
    printStatus "$STATUS_VAULTACCESS" "True" "$INSTANCE_VAULTACCESS"
}

getEDBPostgresStatus() {
    # EDB Postgres status-all
    INSTANCE_EDBPOSTGRES=$(oc get clusters.postgresql.k8s.enterprisedb.io -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase")
    STATUS_EDBPOSTGRES=$(oc get clusters.postgresql.k8s.enterprisedb.io -o jsonpath='{.items[].status.phase}')
    printStatus "$STATUS_EDBPOSTGRES" "Cluster in healthy state" "$INSTANCE_EDBPOSTGRES" 
}

getPostgreservicesStatus() {
    # Postgreservices status-all
    INSTANCE_POSTGRESERVICES=$(oc get postgreservices cp4waiops-postgres -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:spec.version,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
    STATUS_POSTGRESERVICES=$(oc get postgreservices cp4waiops-postgres -o jsonpath='{.status.conditions[].status}')
    printStatus "$STATUS_POSTGRESERVICES" "True" "$INSTANCE_POSTGRESERVICES"
}

getPostgresDBStatus() {
    # PostgresDB status-all
    INSTANCE_POSTGRESDB=$(oc get postgresdb cp4waiops-postgresdb -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:spec.version,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
    STATUS_POSTGRESDB=$(oc get postgresdb cp4waiops-postgresdb -o jsonpath='{.status.conditions[].status}')
    printStatus "$STATUS_POSTGRESDB" "True" "$INSTANCE_POSTGRESDB"
}

getSecureTunnelStatus() {
    # Secure Tunnel status-all
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        INSTANCE=$(oc get tunnels.sretooling.management.ibm.com -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Deployed\")].status")
    else    
        INSTANCE=$(oc get tunnels.sretooling.management.ibm.com -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Deployed\")].status")
    fi
    STATUS=$(oc get tunnels.sretooling.management.ibm.com -o jsonpath='{.items[].status.versions.status}')
    printStatus "$STATUS" "Ready" "$INSTANCE"
}

getODLMPodStatus() {
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        INSTANCE=$(oc get pod -A | grep operand-deployment-lifecycle-manager)
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
        then
            POD_NAME=$(oc get pods -o name --no-headers=true -n ibm-common-services | grep operand-deployment | awk '{ print substr( $0, 5 ) }')         
            STATUS=$(oc get pod $POD_NAME -n ibm-common-services -o jsonpath='{.status.phase}')

        else
            POD_NAME=$(oc get pods -o name --no-headers=true -n $INSTALLATION_NAMESPACE | grep operand-deployment | awk '{ print substr( $0, 5 ) }')         
            STATUS=$(oc get pod $POD_NAME -n $INSTALLATION_NAMESPACE -o jsonpath='{.status.phase}')

        fi
        if [[ $STATUS == "Running" ]]; then
            printf '%s\n' "$green$INSTANCE$normal"
        else
            printf '%s\n' "$red$INSTANCE$normal"
        fi
    fi
}

getAllCertStatus() {
    AIOPS_CERTS=()                                                                                                                                                                                                             
    while IFS= read -r line; do
        AIOPS_CERTS+=( "$line" )
    done < <( oc get certificate -n $INSTALLATION_NAMESPACE -o=custom-columns='NAME:.metadata.name' --no-headers=true )
    for c in "${AIOPS_CERTS[@]}"; do
        CERT_STATUS=$(oc get cert $c --no-headers=true | awk '{print $2}')
        CERT_RENEWAL=$(oc get cert $c -o custom-columns="NAME:metadata.name,RENEWAL:status.renewalTime,READY:status.conditions[?(@.type==\"Ready\")].status,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        printStatus "$CERT_STATUS" "True" "$CERT_RENEWAL"
    done
}

getOrchestratorPodStatus() {
    INSTANCE=$(oc get pod -A | grep ibm-aiops-orchestrator-controller-manager)
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
        then
            POD_NAME=$(oc get pods -o name --no-headers=true -n $INSTALLATION_NAMESPACE | grep ibm-aiops-orchestrator-controller-manager | awk '{ print substr( $0, 5 ) }')         
            STATUS=$(oc get pod $POD_NAME -n $INSTALLATION_NAMESPACE -o jsonpath='{.status.phase}')
        else
            POD_NAME=$(oc get pods -o name --no-headers=true -n openshift-operators | grep ibm-aiops-orchestrator-controller-manager | awk '{ print substr( $0, 5 ) }')         
            STATUS=$(oc get pod $POD_NAME -n openshift-operators -o jsonpath='{.status.phase}')
        fi
        
        if [[ $STATUS == "Running" ]]; then
            printf '%s\n' "$green$INSTANCE$normal"
        else
            printf '%s\n' "$red$INSTANCE$normal"
        fi
    fi
}

function emulateColumn {
  #old versions of awk are in the wild use early/basic function only (single dim array, for loop, etc)
  awk '{ n=split(o[NR]=$0, a);
         for (c=1; c<=n; ++c) {
           l=length(a[c]);
           if (l>m[c]) m[c]=l;
         }
       } END {
         for (r=1; r<=NR; ++r){
           n=split(o[r], a)
           for (c=1; c<=n; ++c){
             if (c>1) printf("   ");
             printf("%-" m[c] "s", a[c])
           }
           printf("\n")
         }
       }'
}

function showMultiZoneNodes {
  c=${1:-'NAME:.metadata.name,ZONE:.metadata.labels.topology\.kubernetes\.io/zone,REGION:.metadata.labels.topology\.kubernetes\.io/region'}
  [[ $# -gt 0 ]] && shift
  oc get no -l node-role.kubernetes.io/worker -o=custom-columns="$c" "$@"
}


function showMultiZoneStatus {
  ###########
  #First check generic cluster setup so this script can be run prior to installation
  none=$(oc get no)
  if [[ $? -ne 0 ]]; then
    echo "ERROR: Cannot continue with any multizone function when listing nodes fails"
    exit $LINENO;
  fi

  #Get the string oc uses to denote not labeled
  none=$(oc get no -o custom-columns=':.metadata.labels.bogus' | tail -1)

  declare -A region=()
  declare -A zone=()
  declare -A node=()
  while read l; do
    n=$(echo $l | cut -d ' ' -f 1)
    z=$(echo $l | cut -d ' ' -f 2)
    r=$(echo $l | cut -d ' ' -f 3)
    node[$n]=$z
    ((++zone[$z]))
    ((++region[$r]))
  done< <(showMultiZoneNodes "" --no-headers)

  c=${#node[@]}
  if [[ $c -eq 0 ]]; then
    #Hopefully this is never true, everything we check is based on this
    echo "ERROR: No worker nodes are labeled with node-role.kubernetes.io/worker and kubernetes.io/arch=amd64"
    exit $LINENO
  elif [[ $c -lt 3 ]]; then
    echo "WARNING: Found $c worker nodes but at least 3 are required for multizone support"
  fi

  c=${region[${none}]}
  if [[ -n "$c" ]]; then
    echo "WARNING: $c worker nodes are not labeled with topology.kubernetes.io/region."
    echo "         Nodes without a region label may cause pods to not be distributed properly."
  fi

  c=${zone[$none]}
  if [[ -n "$c" ]]; then
    echo "WARNING: $c worker nodes are not labeled with topology.kubernetes.io/zone."
    echo "         Nodes without a zone label may cause pods to not be distributed properly."
  fi

  unset zone[$none]
  c=${#zone[@]}
  if [[ $c -lt 3 ]]; then
    echo "WARNING: Found $c zones but at least 3 are required for multizone to function"
  fi

  #Print node topology summary/status
  echo
  echo 'Regions :' $(echo ${!region[@]} | tr ' ' '\n' | sort -u)
  echo 'Zones   :' $(echo ${!zone[@]} | tr ' ' '\n' | sort -u)
  echo
  showMultiZoneNodes | head -1
  showMultiZoneNodes | tail -n +2 | sort -b -k 3,3 -k 2,2 -k 1,1
  echo

  ###########
  #Now that the node checks have run, check for CloudPak for AI Ops
  declare -A ains=()     #AIOps namespaces
  declare -A csns=()     #CommonServices namespaces

  eval $(oc get -A installation.orchestrator.aiops.ibm.com --ignore-not-found -o jsonpath='{range .items[*]} ains[{.metadata.namespace}]=1{end}')
  c=${#ains[@]}
  if [[ $c -gt 1 ]]; then
    echo "INFO: IBM CloudPak for AI Ops is installed in multiple namespaces: ${ains[@]}"
  elif [[ $c -eq 0 ]]; then
    #May not have permissions to search all namespaces try the current
    eval $(oc get installation.orchestrator.aiops.ibm.com --ignore-not-found -o jsonpath='{range .items[*]} ains[{.metadata.namespace}]=1{end}')
  fi

  #Only search for separate Foundational Services namespace if v3
  for n in ${!ains[@]}; do
    v=$(oc get csv -n $n -o custom-columns=':.metadata.name,:.spec.version' \
        | awk '/^ibm-common-service-operator/ {sub(/^3\..*/,3,$2); print $2}')
    if [[ -z "$v" ]]; then
      echo "WARNING: Cannot determine IBM Foundational Services version, those pods may be missed"
    elif [[ "$v" == "3" ]]; then
      ns=$(oc get -A commonservice.operator.ibm.com -o jsonpath='{.items[*].metadata.namespace}')
      if [[ -z "$ns" ]]; then
        echo "WARNING: Cannot determine IBM Foundational Services namespace, those pods may be missed"
      fi
      for n in $ns; do
        if [[ -z "${ains[$n]}" ]]; then csns[$n]=1; fi
      done
    fi
  done

  if [[ ${#csns[@]} -gt 1 ]]; then
    echo "WARNING: Found multiple IBM Foundational Services namespaces. Some pods shown may be from other CloudPaks"
  fi

  if [[ ${#ains[@]} -lt 1 ]]; then
    ns=$(oc project -q)
    if [[ -n "$ns" ]]; then
      ains[$ns]=1
      echo "WARNING: IBM CloudPak for AI Ops namespace not found, using the current namespace $ns"
    else
      #oc prints "error: no project has been set"
      exit $LINENO
    fi
  fi


  #There is no point in going forward if things are not up and ready
  e=0
  for ns in ${!csns[@]} ${!ains[@]}; do
    sts=$(oc get statefulset -n $ns -o jsonpath='{.items[?(@.status.readyReplicas!=@.status.replicas)].metadata.name}')
    if [[ $? -ne 0 ]]; then (( ++e )); fi
    if [[ -n "$sts" ]]; then echo "ERROR: The following StatefulSets in namespace $ns are not ready: $sts"; exit $LINENO; fi

    dep=$(oc get replicaset -n $ns -o jsonpath='{.items[?(@.status.readyReplicas!=@.status.replicas)].metadata.name}')
    if [[ $? -ne 0 ]]; then (( ++e )); fi
    if [[ -n "$dep" ]]; then echo "ERROR: The following ReplicaSets in namespace $ns are not ready: $dep"; exit $LINENO; fi

    sps=$(oc get strimzipodset.core.ibmevents.ibm.com -n $ns -o jsonpath='{.items[?(@.status.readyPods!=@.status.pods)].metadata.name}')
    if [[ $? -ne 0 ]]; then (( ++e )); fi
    if [[ -n "$sps" ]]; then echo "ERROR: The following StrimziPodSets in namespace $ns are not ready: $sps"; exit $LINENO; fi

    edb=$(oc get cluster.postgresql.k8s.enterprisedb.io -n $ns -o jsonpath='{.items[?(@.status.readyInstances!=@.status.instances)].metadata.name}')
    if [[ $? -ne 0 ]]; then (( ++e )); fi
    if [[ -n "$edb" ]]; then echo "ERROR: The following EDB clusters in namespace $ns are not ready: $edb"; exit $LINENO; fi

    pod=$(oc get po -n $ns)   #ensure we can list pods
    if [[ $? -ne 0 ]]; then (( ++e )); fi

    #ObjectServer implemented as a singleton statefulset so already covered
  done
  if [[ $e -ne 0 ]]; then
    #The most common cause should be permission errors
    echo "ERROR: Cannot continue with multizone status when listing pod resources fails"
    exit $LINENO;
  fi


  declare -A query=( [StatefulSet]='.spec.replicas>1'
                     [ReplicaSet]='.spec.replicas>1'
                     [StrimziPodSet.core.ibmevents.ibm.com]='.status.pods>1'
                     [Cluster.postgresql.k8s.enterprisedb.io]='.spec.instances>1' )
  zones="${!zone[@]}"
  lines=""
  dot=""
  for ns in ${!csns[@]} ${!ains[@]}; do
    echo -n "INFO: Checking the namespace $ns..."
    for k in StatefulSet StrimziPodSet.core.ibmevents.ibm.com Cluster.postgresql.k8s.enterprisedb.io ReplicaSet; do
      for s in $(oc get $k -n $ns -o jsonpath='{.items[?(@'"${query[$k]}"')].metadata.name}'); do
        #elastic/open search creates a uniquely named sts for each zone
        if [[ $k == StatefulSet ]]; then echo $s | grep -q elasticsearch && continue; fi
        zone=()
        o=""
        for z in ${zones}; do zone[$z]=0; done
        if [[ $k == ReplicaSet  &&  -n $(oc get $k $s -n $ns -o jsonpath='{.metadata.ownerReferences[?(@.kind=="Deployment")].name}') ]]; then
          dt=Deployment
        else
          dt=$(echo $k | sed 's/\..*//')
        fi
        while read l; do
          p=$(echo $l | cut -d ' ' -f 1)
          n=$(echo $l | cut -d ' ' -f 2)
          z=${node[$n]}
          o+="$ns $p $z $n $dt\n"
          ((++zone[$z]))
        done< <(oc get po -n $ns -o jsonpath='{range .items[?(@.metadata.ownerReferences[0].name=="'$s'")]}{@.metadata.name} {@.spec.nodeName}{"\n"}{end}')
        #not good if only 1 zone or found a pod not in a zone or the spread diff > 1
        if [[ ${#zone[@]} -lt 2  ||  -n "${zone[$none]}"  ||
              $(expr $(echo ${zone[@]} | tr ' ' '\n' | sort -rn | sed -n '1s/$/ - /p;$p' | tr -d '\n')) -gt 1
           ]]; then
          lines+=$(echo -ne "$o" | sort -b -k 3,3 -k 2,2)"\n"
        fi
        if [[ -z "$dot" ]]; then dot=.; else echo -n $dot; dot=""; fi   #show progress
      done
      if [[ $k == StatefulSet  &&  -n "${ains[$ns]}" \
            && -n "$(oc get po --ignore-not-found aiops-ir-core-ncoprimary-0)" \
            && -n "$(oc get po --ignore-not-found aiops-ir-core-ncobackup-0)" \
         ]]; then
        #Handle ObjectServer special case
        zone=()
        o=""
        for p in aiops-ir-core-ncoprimary-0 aiops-ir-core-ncobackup-0; do
          n=$(oc get po -n $ns $p -o jsonpath='{.spec.nodeName}')
          z=${node[$n]}
          zone[$p]=$z
          o+="$ns $p $z $n $k\n"
        done
        if [[ "${zone[aiops-ir-core-ncoprimary-0]}" == "${zone[aiops-ir-core-ncobackup-0]}" ]]; then
          lines+=$(echo -ne "$o" | sort -b -k 3,3 -k 2,2)"\n"
        fi
      fi
    done
    echo done.
  done

  echo
  if [ -z "$lines" ]; then
    echo "INFO: All pods are distributed appropriately for multizone."
  else
    echo "WARNING: Not all pods are distributed optimally."
    echo
    echo -e "NAMESPACE NAME ZONE NODE KIND\n$lines" | emulateColumn
  fi
}


function showMultiZonePods {
  ###########
  #First check generic cluster setup so this script can be run prior to installation
  none=$(oc get no)
  if [[ $? -ne 0 ]]; then
    echo "ERROR: Cannot continue with any multizone function when listing nodes fails"
    exit $LINENO;
  fi

  #Get the string oc uses to denote not labeled
  none=$(oc get no -o custom-columns=':.metadata.labels.bogus' | tail -1)

  declare -A node=()
  while read l; do
    n=$(echo $l | cut -d ' ' -f 1)
    z=$(echo $l | cut -d ' ' -f 2)
    node[$n]=$z
  done< <(showMultiZoneNodes "" --no-headers)

  hdr=""
  while read l; do
    if [[ -z "$hdr" ]]; then
      hdr=1; echo "$l"
    else
      n=$(echo $l | cut -d ' ' -f 2)
      z=${node[$n]}
      if [[ -z "$z" ]]; then z=$none; fi
      echo "$l" | awk '{print $1, "'$z'", $3}'
    fi
  done< <(oc get po -o custom-columns='NAME:.metadata.name,ZONE:.spec.nodeName,NODE:.spec.nodeName') \
  | emulateColumn

}



if [[ -z "$1"  ||  "$1" == "-h"  ||  "$1" == "--help"  ||  "$1" == "help" ]]
then
  printUsage
  exit 0
fi

if [[ "$1" == "version" ]]
then
    echo "0.0.33"
    exit 0
fi

if [[ "$1" == "config" ]]
then
    echo "$KUBECONFIG"
    exit 0
fi


if [[ "$1" == "multizone" ]]; then
  if [[ 0$(${BASH} -c 'echo ${BASH_VERSINFO[0]}') -lt 04 ]]; then
    echo "ERROR: The ${PLUGIN} plugin requires bash version 4 or higher, but ${BASH} is ${BASH_VERSION}"
    exit $LINENO
  fi
  if [[ -z "$2"  ||  "$2" == "status" ]]; then
    showMultiZoneStatus
  elif [[ "$2" == "pods" ]]; then
    showMultiZonePods
  else
    echo "error: unknown command \"$2\""
    echo "See 'oc ${PLUGIN} -h' for help and examples"
    exit $LINENO
  fi
  exit 0
fi



# Environment variables including installation info (gathered from existing installation instance on the cluster) and version
CLUSTER_ADMIN=$(oc auth can-i '*' '*' --all-namespaces)
SECURE_TUNNEL_EXISTS=""
SUMMARY_FAILURE=""
USER_LEVEL=$(oc whoami) # to check if the user is running the tool at higher than a basic user role
if [[ "$USER_LEVEL" == "basic" ]]
then
    echo ""
    echo "${red}${bold}NOTE: ${normal}You do not have the appropriate permissions to run the CP4AIOps status checker tool."
    echo "      It appears you are logged in as a basic user. Please log in again"
    echo "      with credentials that have more permissions.${normal}"
    echo ""
    exit 0
fi

if [[ "$CLUSTER_ADMIN" == "yes" ]];
then
    INSTALLATION_NAME=$(oc get installations.orchestrator.aiops.ibm.com -A --no-headers | while read a b c; do echo "$b"; done; 2>/dev/null)
    INSTALLATION_NAMESPACE=$(oc get installations.orchestrator.aiops.ibm.com -A --no-headers | while read a b c; do echo "$a"; done; 2>/dev/null)
    CSV_NAME=$(oc get csvs -o name --no-headers=true -n $INSTALLATION_NAMESPACE | grep ibm-aiops-orchestrator)
    VERSION_AIOPSORCHESTRATOR=$(oc get $CSV_NAME -n $INSTALLATION_NAMESPACE -o jsonpath='{.spec.version}' | awk '{ print substr( $0, 0, 3 ) }')
    CLUSTER_SCOPE_INSTALL=$(if [[ $(oc get subscription.operators.coreos.com -A  | grep ibm-aiops-orchestrator | awk '{ print $1 }') == "openshift-operators" ]]; then echo "true"; else echo "false"; fi)
else
    # ask user if they are in the project namespace.
    # if they are, set INSTALLATION_NAMESPACE=current project
    INSTALLATION_NAME=$(oc get installations.orchestrator.aiops.ibm.com --no-headers | while read a b c; do echo "$a"; done; 2>/dev/null)
    INSTALLATION_NAMESPACE=$(oc get installation $INSTALLATION_NAME -o jsonpath='{.metadata.namespace}')
    CSV_NAME=$(oc get csvs -o name --no-headers=true | grep ibm-aiops-orchestrator)
    VERSION_AIOPSORCHESTRATOR=$(oc get $CSV_NAME -o jsonpath='{.spec.version}' | awk '{ print substr( $0, 0, 3 ) }')
fi


if [[ "$1" == "status" ]]
then
    oc project ${INSTALLATION_NAMESPACE}

    echo ""
    echo "${blue}${bold}Cloud Pak for AIOps v${VERSION_AIOPSORCHESTRATOR} installation status:${normal}"

    v=$(echo -e "${VERSION_AIOPSORCHESTRATOR}\n4.2" | sort -V | tail -1)
    if [[ "$v" != "4.2" ]]; then
       #keep trivial convenience command/function for versions > v4.2, but use
       #  built-in status
       oc describe installations.orchestrator.aiops.ibm.com ${INSTALLATION_NAME} | awk 'BEGIN{p=0} /^Events:/{p=0} {if (p) print} /^Status:$/{p=1}'
       exit 0
    fi

    echo "______________________________________________________________"
    echo "Installation instances:" && echo ""
    getInstallationStatus
    
    echo "______________________________________________________________"
    echo "ZenService instances:" && echo ""
    getZenServiceStatus

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
    then 
        echo "______________________________________________________________"
        echo "AutomationUIConfig, AutomationBase, Cartridge, CartridgeRequirements, and EventProcessor instances:" && echo ""   
        getAUICStatus
        getABStatus
        getCartridgeStatus
        getCartridgeRequirementsStatus        
        getIRLifecycleEventProcessorStatus
        getAIOpsEventProcessorStatus
    else
        echo "______________________________________________________________"
        echo "Kafka and Elasticsearch instances:" && echo ""   
        getKafkaStatus
        getElasticsearchStatus
    fi
    
    echo "______________________________________________________________"
    echo "IRCore and AIOpsAnalyticsOrchestrator instances:" && echo ""
    getIRCoreStatus
    getAIOpsAnalyticsOrchestratorStatus

    echo "______________________________________________________________"
    echo "LifecycleService instances:" && echo ""
    getLifecycleServiceStatus        

    echo "______________________________________________________________"
    echo "BaseUI instances:" && echo ""
    getBaseUIStatus

    echo "______________________________________________________________"
    echo "AIManager, ASM, AIOpsEdge, and AIOpsUI instances:" && echo ""
    getAIManagerStatus
    getASMStatus
    getAIOpsEdgeStatus
    getAIOpsUIStatus

    echo "______________________________________________________________"
    printf "
${blue}${bold}Hint: for a more detailed printout of component statuses, run \`oc waiops status-all\`.
${normal}
"
    exit 0
fi

# optional argument handling
if [[ "$1" == "status-all" ]]
then
    oc project ${INSTALLATION_NAMESPACE}

    echo ""
    echo "${blue}${bold}Cloud Pak for AIOps v${VERSION_AIOPSORCHESTRATOR} installation status:${normal}"
    
    if [[ "$CLUSTER_ADMIN" == "no" ]];
    then
        echo ""
        printf "${gray}[INFO] User does not have CLUSTER_ADMIN credentials. Output will be limited.${normal}\n"
        printf "${gray}[INFO] Hint: log in with CLUSTER_ADMIN credentials to view the full output.${normal}${newline}"
    fi

    echo "______________________________________________________________"
    echo "Installation instances:" && echo ""
    getInstallationStatus
    
    echo "______________________________________________________________"
    echo "ZenService instances:" && echo ""
    getZenServiceStatus

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
    then 
        echo "______________________________________________________________"
        echo "AutomationUIConfig, AutomationBase, Cartridge, CartridgeRequirements, and EventProcessor instances:" && echo ""   
        getAUICStatus
        getABStatus
        getCartridgeStatus
        getCartridgeRequirementsStatus        
        getIRLifecycleEventProcessorStatus
        getAIOpsEventProcessorStatus
    else
        echo "______________________________________________________________"
        echo "Kafka and Elasticsearch instances:" && echo ""   
        getKafkaStatus
        getElasticsearchStatus
    fi

    echo "______________________________________________________________"
    echo "IRCore and AIOpsAnalyticsOrchestrator instances:" && echo ""
    getIRCoreStatus
    getAIOpsAnalyticsOrchestratorStatus

    echo "______________________________________________________________"
    echo "LifecycleService instances:" && echo ""
    getLifecycleServiceStatus        

    echo "______________________________________________________________"
    echo "BaseUI instances:" && echo ""
    getBaseUIStatus

    echo "______________________________________________________________"
    echo "AIManager, ASM, AIOpsEdge, and AIOpsUI instances:" && echo ""
    getAIManagerStatus
    getASMStatus
    getAIOpsEdgeStatus
    getAIOpsUIStatus

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.5" ]];
    then
        echo "______________________________________________________________"
        echo "Kong instances:" && echo ""
        getKongStatus
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
    then
        echo "______________________________________________________________"
        echo "Vault (VaultDeploy and VaultAccess) instances:" && echo ""
        getVaultDeployStatus
        getVaultAccessStatus
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ]];
    then 
        echo "______________________________________________________________"
        echo "Postgres instances:" && echo "" 
        getEDBPostgresStatus
    fi 
    
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]];
    then
        getPostgreservicesStatus
        getPostgresDBStatus
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.7" || "${VERSION_AIOPSORCHESTRATOR}" == "4.8" ]]; then
        echo "______________________________________________________________"
        echo "FlinkDeployment:" && echo "" 

        getFlinkDeploymentStatus
    fi

    checkIfSecureTunnelExists
    if [[ "${SECURE_TUNNEL_EXISTS}" == "true" ]];
    then 
        echo "______________________________________________________________"
        echo "Secure Tunnel instances:" && echo ""
        getSecureTunnelStatus
    fi
    
    echo "______________________________________________________________"
    echo "CSVs from $INSTALLATION_NAMESPACE namespace:" && echo ""
    
    getCSVStatus "$INSTALLATION_NAMESPACE" "aimanager-operator"
    getCSVStatus "$INSTALLATION_NAMESPACE" "aiopsedge-operator"
    getCSVStatus "$INSTALLATION_NAMESPACE" "asm-operator"
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ||  "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]];
    then 
        getCSVStatus "$INSTALLATION_NAMESPACE" "couchdb-operator"
    fi
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-aiops-ir-ai"
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-aiops-ir-core"
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-aiops-ir-lifecycle"
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-aiops-orchestrator"
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
    then 
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-automation-core"
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-automation-eventprocessing"
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-automation.v"
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.8" && "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]]; then
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-automation-elastic"
    else
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-elasticsearch-operator"
    fi
    
    if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.7" && "${VERSION_AIOPSORCHESTRATOR}" != "4.8" && "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]];
    then
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-automation-flink"
    else
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-opencontent-flink"
    fi


    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
    then 
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-cloud-databases-redis"
    else 
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-redis-cp"
    fi
    
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-common-service-operator"
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]];
    then
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-postgreservice-operator"
    fi
    if [[ "${SECURE_TUNNEL_EXISTS}" == "true" ]];
    then 
        getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-secure-tunnel-operator"        
    fi
    
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
    then
    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-vault-operator"
    fi

    getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-watson-aiops-ui-operator"

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
    then
        echo "______________________________________________________________"
        echo "CSVs from ibm-common-services namespace:" && echo ""

        if [[ "$CLUSTER_ADMIN" == "yes" ]];
        then
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                getCSVStatus "ibm-common-services" "cloud-native-postgresql"
            fi
            getCSVStatus "ibm-common-services" "ibm-cert-manager-operator"
            getCSVStatus "ibm-common-services" "ibm-common-service-operator"
            getCSVStatus "ibm-common-services" "ibm-commonui-operator"
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then 
                getCSVStatus "ibm-common-services" "ibm-crossplane-operator"
                getCSVStatus "ibm-common-services" "ibm-crossplane-provider-kubernetes-operator"
            fi
            getCSVStatus "ibm-common-services" "ibm-events-operator"
            getCSVStatus "ibm-common-services" "ibm-iam-operator"
            getCSVStatus "ibm-common-services" "ibm-ingress-nginx-operator"
            getCSVStatus "ibm-common-services" "ibm-licensing-operator"
            getCSVStatus "ibm-common-services" "ibm-management-ingress-operator"
            getCSVStatus "ibm-common-services" "ibm-mongodb-operator"
            getCSVStatus "ibm-common-services" "ibm-namespace-scope-operator"
            getCSVStatus "ibm-common-services" "ibm-platform-api-operator"
            getCSVStatus "ibm-common-services" "ibm-zen-operator"
            getCSVStatus "ibm-common-services" "operand-deployment-lifecycle-manager"
        else
            printf "${gray}[INFO] Skipping the following components (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                clusterAdminSkipMessage "cloud-native-postgresql"
            fi
            clusterAdminSkipMessage "ibm-cert-manager-operator"
            clusterAdminSkipMessage "ibm-common-service-operator"
            clusterAdminSkipMessage "ibm-commonui-operator"
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then 
                clusterAdminSkipMessage "ibm-crossplane-operator"
                clusterAdminSkipMessage "ibm-crossplane-provider-kubernetes-operator"
            fi
            clusterAdminSkipMessage "ibm-events-operator"
            clusterAdminSkipMessage "ibm-iam-operator"
            clusterAdminSkipMessage "ibm-ingress-nginx-operator"
            clusterAdminSkipMessage "ibm-licensing-operator"
            clusterAdminSkipMessage "ibm-management-ingress-operator"
            clusterAdminSkipMessage "ibm-mongodb-operator"
            clusterAdminSkipMessage "ibm-namespace-scope-operator"
            clusterAdminSkipMessage "ibm-platform-api-operator"
            clusterAdminSkipMessage "ibm-zen-operator"
            clusterAdminSkipMessage "operand-deployment-lifecycle-manager"
        fi
    else
        if [[ "$CLUSTER_ADMIN" == "yes" ]];
        then
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                getCSVStatus "$INSTALLATION_NAMESPACE" "cloud-native-postgresql"
            fi
            getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-cert-manager-operator"
            getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-commonui-operator"
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then 
                getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-crossplane-operator"
                getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-crossplane-provider-kubernetes-operator"
            fi
            getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-events-operator"
            getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-iam-operator"
            getCSVStatus "$INSTALLATION_NAMESPACE" "ibm-zen-operator"
            getCSVStatus "$INSTALLATION_NAMESPACE" "operand-deployment-lifecycle-manager"
        else
            printf "${gray}[INFO] Skipping the following components (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                clusterAdminSkipMessage "cloud-native-postgresql"
            fi
            clusterAdminSkipMessage "ibm-cert-manager-operator"
            clusterAdminSkipMessage "ibm-common-service-operator"
            clusterAdminSkipMessage "ibm-commonui-operator"
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then 
                clusterAdminSkipMessage "ibm-crossplane-operator"
                clusterAdminSkipMessage "ibm-crossplane-provider-kubernetes-operator"
            fi
            clusterAdminSkipMessage "ibm-events-operator"
            clusterAdminSkipMessage "ibm-iam-operator"
            clusterAdminSkipMessage "ibm-mongodb-operator"
            clusterAdminSkipMessage "ibm-zen-operator"
            clusterAdminSkipMessage "operand-deployment-lifecycle-manager"
        fi
    fi

    echo "______________________________________________________________"
    echo "Subscriptions from $INSTALLATION_NAMESPACE namespace:" && echo ""
    getSubscriptionStatus "aimanager-operator" "$INSTALLATION_NAMESPACE" 
    getSubscriptionStatus "aiopsedge-operator" "$INSTALLATION_NAMESPACE" 
    getSubscriptionStatus "asm-operator" "$INSTALLATION_NAMESPACE" 
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ||  "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]];
    then 
        getSubscriptionStatus "couchdb" "$INSTALLATION_NAMESPACE" 
    fi
    if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
    then 
        getSubscriptionStatus "ibm-aiops-orchestrator" "$INSTALLATION_NAMESPACE" 
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
        then 
            getSubscriptionStatusSelector "operators.coreos.com/ibm-automation.$INSTALLATION_NAMESPACE" "$INSTALLATION_NAMESPACE" 
            getSubscriptionStatusGrep "ibm-automation-core" "$INSTALLATION_NAMESPACE"
            getSubscriptionStatusGrep "ibm-automation-eventprocessing" "$INSTALLATION_NAMESPACE" 
        fi

        if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.8" ]] && [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]]; then
            getSubscriptionStatusGrep "ibm-automation-elastic" "$INSTALLATION_NAMESPACE"
        else
            getSubscriptionStatusGrep "ibm-elasticsearch-operator" "$INSTALLATION_NAMESPACE"
        fi
        
        if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.7" ]] && [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.8" ]] && [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]];
        then
            getSubscriptionStatusGrep "ibm-automation-flink" "$INSTALLATION_NAMESPACE"
        else
            getSubscriptionStatusGrep "ibm-opencontent-flink" "$INSTALLATION_NAMESPACE"
        fi
    fi

    if [[ "$VERSION_AIOPSORCHESTRATOR" != "4.6" && "$VERSION_AIOPSORCHESTRATOR" != "4.7"  && "$VERSION_AIOPSORCHESTRATOR" != "4.8" && "$VERSION_AIOPSORCHESTRATOR" != "4.9" ]]; then
        getSubscriptionStatus "ibm-management-kong" "$INSTALLATION_NAMESPACE" 
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]];
    then
        getSubscriptionStatus "ibm-postgreservice-operator" "$INSTALLATION_NAMESPACE" 
    fi
    if [[ "${SECURE_TUNNEL_EXISTS}" == "true" ]];
    then 
        getSubscriptionStatus "ibm-secure-tunnel-operator" "$INSTALLATION_NAMESPACE" 
    fi
    getSubscriptionStatus "ibm-watson-aiops-ui-operator" "$INSTALLATION_NAMESPACE"

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.7" || "${VERSION_AIOPSORCHESTRATOR}" == "4.8" || "${VERSION_AIOPSORCHESTRATOR}" == "4.9" ]]; then
        getSubscriptionStatus "ibm-aiops-ir-ai" "$INSTALLATION_NAMESPACE" 
        getSubscriptionStatus "ibm-aiops-ir-core" "$INSTALLATION_NAMESPACE" 
        getSubscriptionStatus "ibm-aiops-ir-lifecycle" "$INSTALLATION_NAMESPACE"
    else
        getSubscriptionStatus "ir-ai-operator" "$INSTALLATION_NAMESPACE" 
        getSubscriptionStatus "ir-core-operator" "$INSTALLATION_NAMESPACE" 
        getSubscriptionStatus "ir-lifecycle-operator" "$INSTALLATION_NAMESPACE"
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
    then 
        getSubscriptionStatus "redis" "$INSTALLATION_NAMESPACE" 
    else
        getSubscriptionStatus "ibm-redis-cp" "$INSTALLATION_NAMESPACE"
    fi
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
    then
        getSubscriptionStatus "vault" "$INSTALLATION_NAMESPACE" 
    fi
    # if statement block to account for versions over 4.2 (clusterwide changes)
    if [ "${CLUSTER_SCOPE_INSTALL}" == "true" ];
    then
        if [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.0" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.1" ]];
        then
            getSubscriptionStatusGrep "ibm-automation-elastic" "$INSTALLATION_NAMESPACE" 
            if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.7" ]];
            then
                getSubscriptionStatusGrep "ibm-automation-flink" "$INSTALLATION_NAMESPACE"
            else
                getSubscriptionStatusGrep "ibm-opencontent-flink" "$INSTALLATION_NAMESPACE"
            fi
        fi
    fi

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
    then
        # Version 4.3 checks and below to account for Bedrock changes
        echo "______________________________________________________________"
        echo "Subscriptions from ibm-common-services namespace:" && echo ""
        
        if [[ "$CLUSTER_ADMIN" == "yes" ]];
        then
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                getSubscriptionStatus "cloud-native-postgresql" "ibm-common-services" 
            fi
            getSubscriptionStatus "ibm-cert-manager-operator" "ibm-common-services" 
            if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
            then  
                getSubscriptionStatusGrep "ibm-common-service-operator" "ibm-common-services" 
            fi
            getSubscriptionStatus "ibm-commonui-operator" "ibm-common-services" 
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then
                getSubscriptionStatus "ibm-crossplane-operator-app" "ibm-common-services" 
                getSubscriptionStatus "ibm-crossplane-provider-kubernetes-operator-app" "ibm-common-services" 
            fi
            getSubscriptionStatus "ibm-events-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-iam-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-ingress-nginx-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-licensing-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-management-ingress-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-mongodb-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-namespace-scope-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-platform-api-operator" "ibm-common-services" 
            getSubscriptionStatus "ibm-zen-operator" "ibm-common-services" 
            getSubscriptionStatus "operand-deployment-lifecycle-manager-app" "ibm-common-services" 

            if [ "${CLUSTER_SCOPE_INSTALL}" == "true" ];
            then 
                echo "______________________________________________________________"
                echo "Subscriptions from openshift-operators namespace:" && echo ""
                getSubscriptionStatus "ibm-aiops-orchestrator" "openshift-operators" 
                if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
                then
                    getSubscriptionStatusSelector "operators.coreos.com/ibm-automation.openshift-operators" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-core" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-eventprocessing" "openshift-operators" 
                fi

                # if statement block to account for versions over 4.2 (clusterwide changes)
                if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.0" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
                then
                    getSubscriptionStatusGrep "ibm-automation-elastic" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-flink" "openshift-operators" 
                fi
                getSubscriptionStatusGrep "ibm-common-service-operator" "openshift-operators"
            fi
        else
            printf "${gray}[INFO] Skipping the following components (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                clusterAdminSkipMessage "cloud-native-postgresql"
            fi
            clusterAdminSkipMessage "ibm-cert-manager-operator"
            if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
            then  
                clusterAdminSkipMessage "ibm-common-service-operator"
            fi
            clusterAdminSkipMessage "ibm-commonui-operator" 
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then
                clusterAdminSkipMessage "ibm-crossplane-operator-app"
                clusterAdminSkipMessage "ibm-crossplane-provider-kubernetes-operator-app"
            fi
            clusterAdminSkipMessage "ibm-events-operator"
            clusterAdminSkipMessage "ibm-iam-operator"
            clusterAdminSkipMessage "ibm-ingress-nginx-operator"
            clusterAdminSkipMessage "ibm-licensing-operator"
            clusterAdminSkipMessage "ibm-management-ingress-operator" 
            clusterAdminSkipMessage "ibm-mongodb-operator"
            clusterAdminSkipMessage "ibm-namespace-scope-operator" 
            clusterAdminSkipMessage "ibm-platform-api-operator" 
            clusterAdminSkipMessage "ibm-zen-operator"
            clusterAdminSkipMessage "operand-deployment-lifecycle-manager-app" 
        fi
    else
        # Version 4.4 checks and above to account for Bedrock changes
        if [[ "$CLUSTER_ADMIN" == "yes" ]];
        then
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                getSubscriptionStatus "cloud-native-postgresql" "$INSTALLATION_NAMESPACE" 
            fi

            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.7" || "${VERSION_AIOPSORCHESTRATOR}" == "4.8" || "${VERSION_AIOPSORCHESTRATOR}" == "4.9" ]]; then
                getSubscriptionStatus "ibm-commonui-operator-app" "$INSTALLATION_NAMESPACE"
            else
                getSubscriptionStatus "ibm-idp-config-ui-operator" "$INSTALLATION_NAMESPACE"
            fi
            
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then
                getSubscriptionStatus "ibm-crossplane-operator-app" "$INSTALLATION_NAMESPACE"
                getSubscriptionStatus "ibm-crossplane-provider-kubernetes-operator-app" "$INSTALLATION_NAMESPACE"
            fi
            getSubscriptionStatus "ibm-events-operator" "$INSTALLATION_NAMESPACE"

            if [[ "$VERSION_AIOPSORCHESTRATOR" == "4.7" || "$VERSION_AIOPSORCHESTRATOR" == "4.8" || "$VERSION_AIOPSORCHESTRATOR" == "4.9" ]];  then
                getSubscriptionStatus "ibm-iam-operator" "$INSTALLATION_NAMESPACE"
            else
                getSubscriptionStatus "ibm-im-operator" "$INSTALLATION_NAMESPACE"
            fi

            if [[ "$VERSION_AIOPSORCHESTRATOR" != "4.6" && "$VERSION_AIOPSORCHESTRATOR" != "4.7" && "$VERSION_AIOPSORCHESTRATOR" != "4.8" && "$VERSION_AIOPSORCHESTRATOR" != "4.9" ]]; then
                getSubscriptionStatus "ibm-im-mongodb-operator" "$INSTALLATION_NAMESPACE"
            fi
            
            if [[ "$VERSION_AIOPSORCHESTRATOR" == "4.7" || "$VERSION_AIOPSORCHESTRATOR" == "4.8" || "$VERSION_AIOPSORCHESTRATOR" == "4.9" ]]; then
                getSubscriptionStatus "ibm-zen-operator" "$INSTALLATION_NAMESPACE"
            else
                getSubscriptionStatus "ibm-platformui-operator" "$INSTALLATION_NAMESPACE"
            fi

            getSubscriptionStatus "operand-deployment-lifecycle-manager-app" "$INSTALLATION_NAMESPACE"
            getSubscriptionStatusGrep "aiops-ibm-common-services" "$INSTALLATION_NAMESPACE"

            if [ "${CLUSTER_SCOPE_INSTALL}" == "true" ];
            then 
                echo "______________________________________________________________"
                echo "Subscriptions from openshift-operators namespace:" && echo ""
                getSubscriptionStatus "ibm-aiops-orchestrator" "openshift-operators" 
                if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
                then
                    getSubscriptionStatusSelector "operators.coreos.com/ibm-automation.openshift-operators" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-core" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-eventprocessing" "openshift-operators" 
                fi

                # if statement block to account for versions over 4.2 (clusterwide changes)
                if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.0" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
                then
                    getSubscriptionStatusGrep "ibm-automation-elastic" "openshift-operators" 
                    getSubscriptionStatusGrep "ibm-automation-flink" "openshift-operators" 
                fi
            fi
        else
            printf "${gray}[INFO] Skipping the following components (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
            if [ "${VERSION_AIOPSORCHESTRATOR}" != "3.3" ];
            then 
                clusterAdminSkipMessage "cloud-native-postgresql"
            fi
            clusterAdminSkipMessage "ibm-cert-manager-operator"
            if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
            then  
                clusterAdminSkipMessage "aiops-ibm-common-services"
            fi
            clusterAdminSkipMessage "ibm-idp-config-ui-operator" 
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then
                clusterAdminSkipMessage "ibm-crossplane-operator-app"
                clusterAdminSkipMessage "ibm-crossplane-provider-kubernetes-operator-app"
            fi
            clusterAdminSkipMessage "ibm-events-operator"
            clusterAdminSkipMessage "ibm-im-operator"
            clusterAdminSkipMessage "ibm-im-mongodb-operator"
            clusterAdminSkipMessage "ibm-platformui-operator"
            clusterAdminSkipMessage "operand-deployment-lifecycle-manager-app" 
        fi
    fi

    echo "______________________________________________________________"
    echo "OperandRequest instances:" && echo ""

    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
    then
        getOperandRequestStatus "aiopsedge-base" "$INSTALLATION_NAMESPACE"  
        getOperandRequestStatus "aiopsedge-cs" "$INSTALLATION_NAMESPACE"  
    fi

    if [ "${CLUSTER_SCOPE_INSTALL}" == "false" ];
    then 
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
        then
            getOperandRequestStatus "iaf-core-operator" "$INSTALLATION_NAMESPACE"  
            getOperandRequestStatus "iaf-eventprocessing-operator" "$INSTALLATION_NAMESPACE" 
            getOperandRequestStatus "iaf-operator" "$INSTALLATION_NAMESPACE" 
        fi
    else
        if [[ "$CLUSTER_ADMIN" == "yes" ]];
        then
            if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
            then
                getOperandRequestStatus "iaf-core-operator" "openshift-operators"  
                getOperandRequestStatus "iaf-eventprocessing-operator" "openshift-operators" 
                getOperandRequestStatus "iaf-operator" "openshift-operators"
            fi
        fi
    fi
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
    then
        getOperandRequestStatus "iaf-system" "$INSTALLATION_NAMESPACE" 
        getOperandRequestStatus "iaf-system-common-service" "$INSTALLATION_NAMESPACE"
        getOperandRequestStatus "operandrequest-kafkauser-iaf-system" "$INSTALLATION_NAMESPACE"
    fi 
    getOperandRequestStatus "ibm-aiops-ai-manager" "$INSTALLATION_NAMESPACE" 
    getOperandRequestStatus "ibm-aiops-aiops-foundation" "$INSTALLATION_NAMESPACE" 
    if [[ "${SECURE_TUNNEL_EXISTS}" == "true" ]];
    then 
        getOperandRequestStatus "ibm-aiops-connection" "$INSTALLATION_NAMESPACE"  
    fi
    getOperandRequestStatus "ibm-iam-service" "$INSTALLATION_NAMESPACE" 

    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
        then
            # Version 4.3 checks and above to account for Bedrock changes
            getOperandRequestStatus "ibm-commonui-request" "ibm-common-services" 
            getOperandRequestStatus "ibm-iam-request" "ibm-common-services" 
            getOperandRequestStatus "ibm-mongodb-request" "ibm-common-services" 
            getOperandRequestStatus "management-ingress" "ibm-common-services" 
            getOperandRequestStatus "platform-api-request" "ibm-common-services" 
        else
            # Version 4.4 checks and above to account for Bedrock changes
            getOperandRequestStatus "ibm-iam-request" "$INSTALLATION_NAMESPACE" 
        fi
    else
        printf "${gray}[INFO] Skipping the following components (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
        then
            clusterAdminSkipMessage "iaf-core-operator"
            clusterAdminSkipMessage "iaf-eventprocessing-operator"
            clusterAdminSkipMessage "iaf-operator"
        fi
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]];
        then
            # Version 4.3 checks and above to account for Bedrock changes
            clusterAdminSkipMessage "ibm-commonui-request"
            clusterAdminSkipMessage "ibm-iam-request"
            clusterAdminSkipMessage "ibm-mongodb-request"
            clusterAdminSkipMessage "management-ingress"
            clusterAdminSkipMessage "platform-api-request"
        else
            # Version 4.4 checks and above to account for Bedrock changes
            clusterAdminSkipMessage "ibm-iam-request"
        fi
    fi

    echo "______________________________________________________________"
    echo "AIOps certificate status:" && echo ""
    getAllCertStatus

    echo "______________________________________________________________"
    echo "ODLM pod current status:" && echo ""
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        getODLMPodStatus
    else
        printf "${gray}[INFO] Skipping the following component (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
        clusterAdminSkipMessage "operand-deployment-lifecycle-manager"
    fi

    echo "______________________________________________________________"
    echo "Orchestrator pod current status:" && echo ""   
    if [[ "$CLUSTER_ADMIN" == "yes" ]];
    then
        getOrchestratorPodStatus
    else
        printf "${gray}[INFO] Skipping the following component (Hint: log in with CLUSTER_ADMIN credentials to view):${normal}${newline}"
        clusterAdminSkipMessage "ibm-aiops-orchestrator-controller-manager"
    fi

    echo ""
    exit 0
fi

# optional argument handling
if [[ "$1" == "status-upgrade" ]]
then
    # This command checks the status of CP4AIOps upgrades
    # to v3.3, v3.4, v3.5, v3.6, v3.7, v4.1, v4.2, v4.3, v4.4, v4.5, and v4.6.

    FAILING_UPGRADE=""
    SUCCESSFULLY_UPGRADED=""

    oc project ${INSTALLATION_NAMESPACE}

    component-versions-33() {
        MAJORVERSION_AIOPSUI="3.3"
        MAJORVERSION_AIMANAGER="2.4"
        MAJORVERSION_IRCORE="3.3"
        MAJORVERSION_LIFECYCLESERVICE="3.3"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="3.2"
        MAJORVERSION_VAULTDEPLOY="3.3"
        MAJORVERSION_VAULTACCESS="3.3"
        MAJORVERSION_POSTGRESERVICE="1.0"
        MAJORVERSION_POSTGRESDB="1.0"
        MAJORVERSION_ASM="2.5"
        MAJORVERSION_FLINKEP="4.0"
    }

    component-versions-34() {
        MAJORVERSION_AIOPSUI="3.4"
        MAJORVERSION_AIMANAGER="2.5"
        MAJORVERSION_IRCORE="3.4"
        MAJORVERSION_LIFECYCLESERVICE="3.4"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="3.4"
        MAJORVERSION_VAULTDEPLOY="3.4"
        MAJORVERSION_VAULTACCESS="3.4"
        MAJORVERSION_POSTGRESERVICE="1.0"
        MAJORVERSION_POSTGRESDB="1.0"
        MAJORVERSION_ASM="2.7"
        MAJORVERSION_FLINKEP="4.0"
    }

    component-versions-35() {
        MAJORVERSION_AIOPSUI="3.5"
        MAJORVERSION_AIMANAGER="2.6"
        MAJORVERSION_IRCORE="3.5"
        MAJORVERSION_LIFECYCLESERVICE="3.5"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="3.5"
        MAJORVERSION_VAULTDEPLOY="3.5"
        MAJORVERSION_VAULTACCESS="3.5"
        MAJORVERSION_POSTGRESERVICE="1.0"
        MAJORVERSION_POSTGRESDB="1.0"
        MAJORVERSION_ASM="2.9"
        MAJORVERSION_FLINKEP="4.0"
    }

    component-versions-36() {
        MAJORVERSION_AIOPSUI="3.6"
        MAJORVERSION_AIMANAGER="2.7"
        MAJORVERSION_IRCORE="3.6"
        MAJORVERSION_LIFECYCLESERVICE="3.6"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="3.6"
        MAJORVERSION_VAULTDEPLOY="3.6"
        MAJORVERSION_VAULTACCESS="3.6"
        MAJORVERSION_ASM="2.11"
        MAJORVERSION_FLINKEP="4.0"
    }

    component-versions-37() {
        MAJORVERSION_AIOPSUI="3.7"
        MAJORVERSION_AIMANAGER="2.8"
        MAJORVERSION_IRCORE="3.7"
        MAJORVERSION_LIFECYCLESERVICE="3.7"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="3.7"
        MAJORVERSION_VAULTDEPLOY="3.7"
        MAJORVERSION_VAULTACCESS="3.7"
        MAJORVERSION_ASM="2.13"
        MAJORVERSION_FLINKEP="4.0"
    }

    component-versions-41() {
        MAJORVERSION_AIOPSUI="4.1"
        MAJORVERSION_AIMANAGER="4.1"
        MAJORVERSION_IRCORE="4.1"
        MAJORVERSION_LIFECYCLESERVICE="4.1"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.1"
        MAJORVERSION_VAULTDEPLOY="4.1"
        MAJORVERSION_VAULTACCESS="4.1"
        MAJORVERSION_ASM="2.15"
    }

    component-versions-42() {
        MAJORVERSION_AIOPSUI="4.2"
        MAJORVERSION_AIMANAGER="4.2"
        MAJORVERSION_IRCORE="4.2"
        MAJORVERSION_LIFECYCLESERVICE="4.2"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.2"
        MAJORVERSION_ASM="2.17"
    }

    component-versions-43() {
        MAJORVERSION_AIOPSUI="4.3"
        MAJORVERSION_AIMANAGER="4.3"
        MAJORVERSION_IRCORE="4.3"
        MAJORVERSION_LIFECYCLESERVICE="4.3"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.3"
        MAJORVERSION_ASM="2.19"
    }

    component-versions-44() {
        MAJORVERSION_AIOPSUI="4.4"
        MAJORVERSION_AIMANAGER="4.4"
        MAJORVERSION_IRCORE="4.4"
        MAJORVERSION_LIFECYCLESERVICE="4.4"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.4"
        MAJORVERSION_ASM="2.20"
    }

    component-versions-45() {
        MAJORVERSION_AIOPSUI="4.5"
        MAJORVERSION_AIMANAGER="4.5"
        MAJORVERSION_IRCORE="4.5"
        MAJORVERSION_LIFECYCLESERVICE="4.5"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.5"
        MAJORVERSION_ASM="2.22"
    }

    component-versions-46() {
        MAJORVERSION_AIOPSUI="4.6"
        MAJORVERSION_AIMANAGER="4.6"
        MAJORVERSION_IRCORE="4.6"
        MAJORVERSION_LIFECYCLESERVICE="4.6"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.6"
        MAJORVERSION_ASM="2.24"
    }

    component-versions-47() {
        MAJORVERSION_AIOPSUI="4.7"
        MAJORVERSION_AIMANAGER="4.7"
        MAJORVERSION_IRCORE="4.7"
        MAJORVERSION_LIFECYCLESERVICE="4.7"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.7"
        MAJORVERSION_ASM="2.25"
    }

    component-versions-48() {
        MAJORVERSION_AIOPSUI="4.8"
        MAJORVERSION_AIMANAGER="4.8"
        MAJORVERSION_IRCORE="4.8"
        MAJORVERSION_LIFECYCLESERVICE="4.8"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.8"
        MAJORVERSION_ASM="2.26"
    }

    component-versions-49() {
        MAJORVERSION_AIOPSUI="4.9"
        MAJORVERSION_AIMANAGER="4.9"
        MAJORVERSION_IRCORE="4.9"
        MAJORVERSION_LIFECYCLESERVICE="4.9"
        MAJORVERSION_AIOPSANALYTICSORCHESTRATOR="4.9"
        MAJORVERSION_ASM="2.28"
    }


    aiopsEdgeBaseUpgradeStatus() {    
        UPGRADED=$(oc get aiopsedge aiopsedge -o jsonpath='{.status.conditions[?(@.type=="UpgradeReady")].status}')
        CONFIGURED=$(oc get aiopsedge aiopsedge -o jsonpath='{.status.phase}')
        DETAILS=$(oc get aiopsedge -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        if [ "${UPGRADED}" == "True" ] && [ "${CONFIGURED}" == "Configured" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    aiopsUIUpgradeStatus() {    
        CURRENT_MAJOR_VERSION=$(oc get aiopsui aiopsui-instance -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get aiopsui -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].status,MESSAGE:status.conditions[?(@.type==\"Ready\")].reason")
        if [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_AIOPSUI}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_AIOPSUI}"
            return 1;
        fi
    }

    kongUpgradeStatus() {    
        INITIALIZED=$(oc get kong gateway -o jsonpath='{.status.conditions[?(@.type=="Initialized")].status}')
        DEPLOYED=$(oc get kong gateway -o jsonpath='{.status.conditions[?(@.type=="Deployed")].status}')
        DETAILS=$(oc get kong -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:.status.conditions[?(@.type==\"Deployed\")].status,MESSAGE:status.conditions[?(@.type==\"Deployed\")].reason" )
        if [ "${INITIALIZED}" == "True" ] && [ "${DEPLOYED}" == "True" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    aiManagerUpgradeStatus() {    
        PHASE_STATUS=$(oc get aimanager aimanager -o jsonpath='{.status.phase}')
        CURRENT_MAJOR_VERSION=$(oc get aimanager aimanager -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get AIManager -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.phase,MESSAGE:status.message")
        if [ "${PHASE_STATUS}" == "Completed" ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_AIMANAGER}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_AIMANAGER}"
            return 1;
        fi
    }

    irCoreUpgradeStatus() {
        UPGRADED=$(oc get ircore aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get ircore aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get ircore aiops -o jsonpath='{.status.conditions[].observedGeneration}')        
        CURRENT_MAJOR_VERSION=$(oc get ircore aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get ircore -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_IRCORE}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_IRCORE}"
            return 1;
        fi
    }

    lifecycleUpgradeStatus() {      
        UPGRADED=$(oc get lifecycleservices aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get lifecycleservices aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get lifecycleservices aiops -o jsonpath='{.status.observedGeneration}')
        CURRENT_MAJOR_VERSION=$(oc get lifecycleservices aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]];
        then
            DETAILS=$(oc get lifecycleservice -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Lifecycle Service Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        else
            DETAILS=$(oc get lifecycleservice -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"LifecycleServiceReady\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        fi
        
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_LIFECYCLESERVICE}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_LIFECYCLESERVICE}"
            return 1;
        fi
    }

    aiopsAnalyticsUpgradeStatus() {
        UPGRADED=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.observedGeneration}')
        CURRENT_MAJOR_VERSION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get AIOpsAnalyticsOrchestrator  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason,MESSAGE:status.conditions[?(@.type==\"Ready\")].message")
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_AIOPSANALYTICSORCHESTRATOR}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_AIOPSANALYTICSORCHESTRATOR}"
            return 1;
        fi
    }

    vaultDeployUpgradeStatus() {
        VAULTDEPLOY_COMPLETED=$(oc get vaultdeploy ibm-vault-deploy -o jsonpath='{.status.conditions[?(@.type=="Completed")].status}')
        CURRENT_MAJOR_VERSION=$(oc get vaultdeploy ibm-vault-deploy -o jsonpath='{.metadata.annotations.productVersion}' | cut -c1-3)
        DETAILS=$(oc get vaultdeploy  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:metadata.annotations.productVersion,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
        if [ "${VAULTDEPLOY_COMPLETED}" == "True" ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_VAULTDEPLOY}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_VAULTDEPLOY}"
            return 1;
        fi
    }

    vaultAccessUpgradeStatus() {
        VAULTACCESS_COMPLETED=$(oc get vaultaccess ibm-vault-access -o jsonpath='{.status.conditions[?(@.type=="Completed")].status}')
        CURRENT_MAJOR_VERSION=$(oc get vaultaccess ibm-vault-access -o jsonpath='{.metadata.annotations.productVersion}' | cut -c1-3)
        DETAILS=$(oc get vaultaccess -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:metadata.annotations.productVersion,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
        if [ "${VAULTACCESS_COMPLETED}" == "True" ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_VAULTACCESS}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_VAULTACCESS}"
            return 1;
        fi
    }

    postgresUpgradeStatus() {
        if [ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ] || [ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ] || [ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ];
        then
            POSTGRESERVICE_COMPLETED=$(oc get postgreservice cp4waiops-postgres -o jsonpath='{.status.conditions[0].type}')
            POSTGRESDB_COMPLETED=$(oc get postgresdb cp4waiops-postgresdb -o jsonpath='{.status.conditions[0].type}')

            STATEFULSET_REPLICA_COUNT=$(oc get statefulset cp4waiops-postgres-keeper -o jsonpath='{.status.replicas}')
            STATEFULSET_CURRENT_REPLICA_COUNT=$(oc get statefulset cp4waiops-postgres-keeper -o jsonpath='{.status.currentReplicas}')

            POSTGRES_PROXY_REPLICA_COUNT=$(oc get deployment cp4waiops-postgres-proxy -o jsonpath='{.status.replicas}')
            POSTGRES_PROXY_CURRENT_REPLICA_COUNT=$(oc get deployment cp4waiops-postgres-proxy -o jsonpath='{.status.availableReplicas}')

            POSTGRES_SENTINEL_REPLICA_COUNT=$(oc get deployment cp4waiops-postgres-sentinel -o jsonpath='{.status.replicas}')
            POSTGRES_SENTINEL_CURRENT_REPLICA_COUNT=$(oc get deployment cp4waiops-postgres-sentinel -o jsonpath='{.status.availableReplicas}')

            POSTGRESERVICE_CURRENT_MAJOR_VERSION=$(oc get postgreservices cp4waiops-postgres -o jsonpath='{.spec.version}' | cut -c1-3)
            POSTGRESDB_CURRENT_MAJOR_VERSION=$(oc get postgresdb cp4waiops-postgresdb -o jsonpath='{.spec.version}' | cut -c1-3)
            DETAILS=$(oc get postgreservices,postgresdb -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:spec.version,STATUS:status.conditions[?(@.type==\"Completed\")].status,MESSAGE:status.conditions[?(@.type==\"Completed\")].message")
            if [ "${POSTGRESERVICE_COMPLETED}" == "${POSTGRESDB_COMPLETED}" ] && [ "${STATEFULSET_REPLICA_COUNT}" == "${STATEFULSET_CURRENT_REPLICA_COUNT}" ] && [ "${POSTGRES_PROXY_REPLICA_COUNT}" == "${POSTGRES_PROXY_CURRENT_REPLICA_COUNT}" ] && [ "${POSTGRES_SENTINEL_REPLICA_COUNT}" == "${POSTGRES_SENTINEL_CURRENT_REPLICA_COUNT}" ] && [ "${POSTGRESERVICE_CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_POSTGRESERVICE}" ] && [ "${POSTGRESDB_CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_POSTGRESDB}" ];
            then 
                SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
                return 0;
            else 
                FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_POSTGRESERVICE}${newline}EXPECTED PostgresDB MAJOR VERSION: ${MAJORVERSION_POSTGRESDB}"
                return 1;
            fi
        fi
    }

    asmUpgradeStatus() {
        ASM_COMPLETED=$(oc get asm aiops-topology -o jsonpath='{.status.phase}')
        if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]];
        then 
            CURRENT_MAJOR_VERSION=$(oc get asm aiops-topology -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        else           
            CURRENT_MAJOR_VERSION=$(oc get asm aiops-topology -o jsonpath='{.status.versions.reconciled}' | cut -c1-4)
        fi

        DETAILS=$(oc get asm -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.phase")
        if [ "${ASM_COMPLETED}" == "OK" ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_ASM}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_ASM}"
            return 1;
        fi
    }

    FlinkEventProcessorUpgradeStatus() {
        FLINK_EP_COMPLETED=$(oc get EventProcessor cp4waiops-eventprocessor -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        CURRENT_MAJOR_VERSION=$(oc get EventProcessor cp4waiops-eventprocessor -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get EventProcessor cp4waiops-eventprocessor -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,VERSION:status.versions.reconciled,STATUS:.status.conditions[?(@.type=="Ready")].status,MESSAGE:.status.conditions[?(@.type=="Ready")].message')
        if [ "${FLINK_EP_COMPLETED}" == "True" ] && [ "${CURRENT_MAJOR_VERSION}" == "${MAJORVERSION_FLINKEP}" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}\n* EXPECTED MAJOR VERSION: ${MAJORVERSION_FLINKEP}"
            return 1;
        fi
    }

    secureTunnelUpgradeStatus() {    
        checkIfSecureTunnelExists
        if [[ "${SECURE_TUNNEL_EXISTS}" == "true" ]];
        then 
            INITIALIZED=$(oc get tunnels.sretooling.management.ibm.com -o jsonpath='{.items[].status.conditions[?(@.type=="Initialized")].status}' --ignore-not-found)
            DEPLOYED=$(oc get tunnels.sretooling.management.ibm.com -o jsonpath='{.items[].status.conditions[?(@.type=="Deployed")].status}')
            
            NUM_DEPLOYMENT_OPERATORREPLICAS=$(oc get deployment ibm-secure-tunnel-operator -o jsonpath='{.status.replicas}')
            NUM_DEPLOYMENT_OPERATORAVAILABLEREPLICAS=$(oc get deployment ibm-secure-tunnel-operator -o jsonpath='{.status.availableReplicas}')
            
            NUM_DEPLOYMENT_NETWORKAPIREPLICAS=$(oc get deployment sre-tunnel-tunnel-network-api -o jsonpath='{.status.replicas}')
            NUM_DEPLOYMENT_NETWORKAPIAVAILABLEREPLICAS=$(oc get deployment sre-tunnel-tunnel-network-api -o jsonpath='{.status.availableReplicas}')
            
            NUM_DEPLOYMENT_TUNNELUIREPLICAS=$(oc get deployment sre-tunnel-tunnel-ui-mcmtunnelui -o jsonpath='{.status.replicas}')
            NUM_DEPLOYMENT_TUNNELUIAVAILABLEREPLICAS=$(oc get deployment sre-tunnel-tunnel-ui-mcmtunnelui -o jsonpath='{.status.availableReplicas}')
            
            DETAILS=$(oc get tunnels.sretooling.management.ibm.com -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Deployed\")].status")
            if [ "${INITIALIZED}" == "True" ] && [ "${DEPLOYED}" == "True" ] && [ "${NUM_DEPLOYMENT_OPERATORREPLICAS}" == "${NUM_DEPLOYMENT_OPERATORAVAILABLEREPLICAS}" ] && [ "${NUM_DEPLOYMENT_NETWORKAPIREPLICAS}" == "${NUM_DEPLOYMENT_NETWORKAPIAVAILABLEREPLICAS}" ] && [ "${NUM_DEPLOYMENT_TUNNELUIREPLICAS}" == "${NUM_DEPLOYMENT_TUNNELUIAVAILABLEREPLICAS}" ];
            then 
                SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
                return 0;
            else 
                FAILING_UPGRADE+="${newline}${DETAILS}"
                return 1;
            fi
        fi
    }

    # Check current instance version and component status checks for that version of CP4AIOps
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.9" ]]; then
        component-versions-49
    elif [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.8" ]]; then
        component-versions-48
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.7" ];
    then
        component-versions-47
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.6" ];
    then
        component-versions-46
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.5" ];
    then
        component-versions-45
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.4" ];
    then
        component-versions-44
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ];
    then
        component-versions-43
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ];
    then
        component-versions-42
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ];
    then 
        component-versions-41
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ];
    then 
        component-versions-37
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ];
    then 
        component-versions-36
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ];
    then 
        component-versions-35
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ];
    then 
        component-versions-34
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]; 
    then
        component-versions-33
    elif [ "${VERSION_AIOPSORCHESTRATOR}" == "0.1" ];
    then
        # for developer builds (v0.1), we will check against release-4.8 versions
        component-versions-49
        echo ""
        echo "${red}${bold}NOTE: ${normal}Your Cloud Pak for AIOps install appears to be an internal dev version (v${VERSION_AIOPSORCHESTRATOR})."
        echo "      The status-upgrade command checks the status of upgrades to v3.3 - v3.7 and v4.1 - v4.8 only." 
        echo "      Therefore, the upgrade checks below will be against v4.7 component versions."
        echo "      This may influence your results below if your dev build is not based on release-4.8.${normal}"
    else
        echo ""
        echo "${red}${bold}ERROR: ${normal}Your Cloud Pak for AIOps install appears to be v${VERSION_AIOPSORCHESTRATOR}."
        echo "       The status-upgrade command checks the status of upgrades to v3.3 - v3.7 and v4.1 - v4.8 only." 
        echo "       The version you are using is not supported for use with the status-upgrade command. Exiting."
        echo ""
        exit 0
    fi

    echo ""
    echo "${blue}${bold}Cloud Pak for AIOps v${VERSION_AIOPSORCHESTRATOR} upgrade status:${normal}"

    aiopsEdgeBaseUpgradeStatus
    lifecycleUpgradeStatus
    aiopsUIUpgradeStatus
    
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.2" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.5" ]];
    then
        kongUpgradeStatus
    fi

    aiManagerUpgradeStatus
    irCoreUpgradeStatus
    aiopsAnalyticsUpgradeStatus
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "4.1" ]];
    then
        vaultDeployUpgradeStatus
        vaultAccessUpgradeStatus
    fi
    postgresUpgradeStatus
    secureTunnelUpgradeStatus
    asmUpgradeStatus
    if [[ "${VERSION_AIOPSORCHESTRATOR}" != "4.7" && "${VERSION_AIOPSORCHESTRATOR}" != "4.8" && "${VERSION_AIOPSORCHESTRATOR}" != "4.9" ]];
    then
        FlinkEventProcessorUpgradeStatus
    fi


    # Print out results of status checks
    printf "
${normal}______________________________________________________________

The following component(s) have finished upgrading:
${green}${SUCCESSFULLY_UPGRADED}

${normal}______________________________________________________________
"
    if [ "$FAILING_UPGRADE" != "" ];
    then 
        printf "
${normal}______________________________________________________________

Meanwhile, the following component(s) have not upgraded yet:
${red}${FAILING_UPGRADE}

${normal}If only a short time has passed since the upgrade was started, the components may
need more time to complete upgrading. If you have waited a significant amount of time
and the statuses of the components listed above are not changing, please refer to
the troubleshooting docs or open a support case.

${normal}______________________________________________________________
";
    fi

    printf "
${blue}${bold}Hint: for a more detailed printout of component statuses, run \`oc waiops status\` or \`oc waiops status-all\`.
${normal}
"
    exit 0
fi

# optional argument handling
if [[ "$1" == "status-summary" ]]
then
    oc project ${INSTALLATION_NAMESPACE}
    if [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.3" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.4" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.5" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.6" ]] || [[ "${VERSION_AIOPSORCHESTRATOR}" == "3.7" ]];
    then
        getAUICStatus "status-summary"
        getABStatus "status-summary"
        getCartridgeStatus "status-summary"
        getCartridgeRequirementsStatus "status-summary"        
        getIRLifecycleEventProcessorStatus "status-summary"
        getAIOpsEventProcessorStatus "status-summary"
    fi
    getInstallationStatus "status-summary"
    getZenServiceStatus "status-summary"
    getIRCoreStatus "status-summary"
    getAIOpsAnalyticsOrchestratorStatus "status-summary"
    getLifecycleServiceStatus "status-summary"        
    getBaseUIStatus "status-summary"
    getAIManagerStatus "status-summary"
    getASMStatus "status-summary"
    getAIOpsEdgeStatus "status-summary"
    getAIOpsUIStatus "status-summary"
    getKafkaStatus "status-summary"
    getElasticsearchStatus "status-summary"

    
    if [[ "$SUMMARY_FAILURE" == "" ]];
    then
        printf "${newline}${green}The status of the components listed in \`oc waiops status\` currently appear healthy!${normal}"
        printf "${newline}${blue}${bold}Hint: for a more detailed printout of component statuses, run \`oc waiops status\` or \`oc waiops status-all\`.${normal}"
        printf "${newline}"
    else
        printf "${newline}${red}The following components are either currently failing or incomplete:"
        printf "\n${red}${SUMMARY_FAILURE}${normal}"
        printf "${newline}${blue}${bold}Hint: for a more detailed printout of component statuses, run \`oc waiops status\` or \`oc waiops status-all\`.${normal}"
        printf "${newline}"
    fi
    exit 0
fi


echo "error: unknown command \"$1\""
echo "See 'oc ${PLUGIN} -h' for help and examples"
exit $LINENO
