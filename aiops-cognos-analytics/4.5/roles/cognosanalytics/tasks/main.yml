- name: be sure Cognos Analytics CatalogSource is installed
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1alpha1
      group: operators.coreos.com
      kind: CatalogSource
      metadata:
        name: "{{ ca_catalog_name }}"
        namespace: "{{ ca_catalog_namespace }}"
      spec:
        sourceType: grpc
        image: "{{ ca_catalog_image }}"

- name: be sure Cognos Analytics CatalogSource is READY
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ ca_catalog_name }}"
    namespace: "{{ ca_catalog_namespace }}"
    kind: CatalogSource
  register: ca_catalog_info
  until: 
  - ca_catalog_info.resources is defined
  - ca_catalog_info.resources | length > 0
  - ca_catalog_info.resources[0].status is defined
  - ca_catalog_info.resources[0].status.connectionState is defined
  - ca_catalog_info.resources[0].status.connectionState.lastObservedState == "READY"
  retries: 8 # 8 loops at 15 second intervals is 2 minutes 
  delay: 15 # 15 seconds

- name: be sure Cognos Analytics is subscribed
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1alpha1
      group: operators.coreos.com
      kind: Subscription
      metadata:
        name: "{{ ca_package }}"
        namespace: "{{ operator_namespace }}"
      spec:
        name: "{{ ca_package }}"
        channel: "{{ ca_channel }}"
        installPlanApproval: "{{approval_type}}"
        source: "{{ ca_catalog_name }}"
        sourceNamespace: "{{ ca_catalog_namespace }}"

- name: be sure Cognos Analytics is AtLatestKnown
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ ca_package }}"
    namespace: "{{ operator_namespace }}"
    kind: Subscription
  register: casub_info
  until: 
  - casub_info.resources is defined
  - casub_info.resources | length > 0
  - casub_info.resources[0].status is defined
  - casub_info.resources[0].status.state is defined
  - casub_info.resources[0].status.state == "AtLatestKnown"
  retries: 20 # 20 loops at 15 second intervals is 5 minutes 
  delay: 15 # 15 seconds

- name: be sure CAService instance is created
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      group: ca.cpd.ibm.com
      kind: CAService
      metadata:
        name: "{{ ca_name }}"
        namespace: "{{ ca_namespace }}"
      spec:
        blockStorageClass: "{{ block_storageclass }}"
        fileStorageClass: "{{ file_storageclass }}"
        installCCS: false
        license:
          accept: "{{ licenseaccept }}"
        version: "{{ ca_version }}"

- name: be sure Cognos Analytics CR is ready (60 minute timeout)
  kubernetes.core.k8s_info:
    api_version: ca.cpd.ibm.com/v1
    name: "{{ ca_name }}"
    namespace: "{{ ca_namespace }}"
    kind: caservice
  register: caservice_info
  until: 
  - caservice_info.resources is defined
  - caservice_info.resources | length == 1
  - caservice_info.resources[0].status is defined
  - caservice_info.resources[0].status.caStatus is defined
  - caservice_info.resources[0].status.caStatus == "Completed"
  - caservice_info.resources[0].status.caAddonStatus is defined
  - caservice_info.resources[0].status.caAddonStatus == "Completed"
  retries: 30 # 30 retries at 120s delays is 60 minutes
  delay: 120 # 120 second delay

- name: retrieve DB2 instancepassword
  kubernetes.core.k8s_info:
    api_version: v1
    name: "c-db2u-db01-instancepassword"
    namespace: "{{ ca_namespace }}"
    kind: Secret
  register: cainstancepassword_info
  until: 
  - cainstancepassword_info.resources is defined
  - cainstancepassword_info.resources | length == 1
  - cainstancepassword_info.resources[0].data is defined
  - cainstancepassword_info.resources[0].data.password is defined
  retries: 4 # 5 loops at 15 second intervals is 1 minute
  delay: 15 # 15 seconds


- name: be sure provision Script is executed ({{ provision_timeout }} minute timeout)
  ansible.builtin.script: ./hack/provision.sh "{% if reprovision_cognos == true %}-R{% endif %}" -n "{{ ca_namespace }}" -T "{{ provision_timeout }}" -f "{{ file_storageclass }}" -b "{{ block_storageclass }}" -p "{{ plan_size }}" -V "{{ ca_version }}" -C "{{ content_store }}" -H "{{ content_store_db_url }}" -D "{{ content_store_db_name }}" -U "{{ content_store_db_user }}" -P "{{ cainstancepassword_info.resources[0].data.password | b64decode }}" -L "{{ content_store_db_port }}"
  register: provision_result

- name: print return information from the previous task
  ansible.builtin.debug:
    var: provision_result

- name: retrieve CA Service Instance URL
  kubernetes.core.k8s_info:
    api_version: ca.cpd.ibm.com/v1
    namespace: "{{ ca_namespace }}"
    kind: CAServiceInstance
  register: cainstancelist_info
  until: 
  - cainstancelist_info.resources is defined
  - cainstancelist_info.resources | length == 1
  - cainstancelist_info.resources[0].spec is defined
  - cainstancelist_info.resources[0].spec.cp4d_web_url is defined
  #retries: 4 # 5 loops at 15 second intervals is 1 minute
  #delay: 15 # 15 seconds  

- name: print CAServiceInstance Web URL
  ansible.builtin.debug:
    var: cainstancelist_info.resources[0].spec.cp4d_web_url

- name: be sure ZenExtension is registered for CA Service Instance in AIOps
  kubernetes.core.k8s:
    state: present
    template: 'templates/zen-ca-extension-cfgmap.yml.j2'

- name: Delete the DB2 route
  k8s:
    api_version: v1
    kind: Route
    namespace: "{{ ca_namespace }}"
    name: "db2u-db2u-db01-tls-route"
    state: absent
