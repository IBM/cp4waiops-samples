{"version":3,"file":"convertConditionSet.js","names":["MEMDB_TO_API_OPERATOR_MAP","contains","startsWith","endsWith","isEmpty","API_FIELD_MAP","INSIGHT_FIELDS","Object","keys","INSIGHT_PATH","forEach","key","indexOf","push","getField","field","isForAPI","prefix","apiField","getOperator","operator","isBujiExpression","value","regex","test","getValue","condition","processConditionSet","conditions","fieldPrefix","map","c","inactive","type","Array","isArray","a","v","addFieldPrefix","additionalfields","fieldCondition","additionalFieldsCondition","f","join","length","proccessedConditionSet","filter","Boolean","conditionSetToAPIQuery","conditionSets","query","_exports"],"sources":["../../ext/common/convertConditionSet.js"],"sourcesContent":["/* ******************************************************** {COPYRIGHT-TOP} ****\n * IBM Confidential\n * Licensed Materials - Property of IBM\n *\n * (C) Copyright IBM Corp. 2022, 2023 All Rights Reserved\n * 5725-Q09, 5737-M96\n *\n * US Government Users Restricted Rights - Use, duplication, or\n * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.\n ********************************************************* {COPYRIGHT-END} ****/\nimport { INSIGHT_PATH } from './InsightColumns';\n\n// need to add mapping for more operators which are different\n// for MemDB and API\nconst MEMDB_TO_API_OPERATOR_MAP = {\n  contains: 'like',\n  '!contains': 'not like',\n  startsWith: 'like',\n  endsWith: 'like',\n  isEmpty: '=',\n  '!isEmpty': '!='\n};\n\n// convert the insights fields to the format that API expects\nconst API_FIELD_MAP = {};\nconst INSIGHT_FIELDS = [];\nObject.keys(INSIGHT_PATH).forEach((key) => {\n  // use insights.type for enrichment insights and insights.source for grouping insights\n  API_FIELD_MAP[`\\`${INSIGHT_PATH[key]}\\``] = INSIGHT_PATH[key].indexOf('insight-source') !== -1 ? 'insights.source' : 'insights.type';\n  INSIGHT_FIELDS.push(`\\`${INSIGHT_PATH[key]}\\``);\n});\n\nfunction getField(field, isForAPI, prefix, apiField) {\n  return apiField || API_FIELD_MAP[field] || field;\n}\n\nfunction getOperator(operator) {\n  return MEMDB_TO_API_OPERATOR_MAP[operator] || operator;\n}\n\nfunction isBujiExpression(value) {\n  const regex = /{{.+}}/;\n  return regex.test(value);\n}\n\nfunction getValue(value, isForAPI, condition) {\n  if (isForAPI) {\n    if (condition.operator === 'startsWith') {\n      return `'^${value}'`;\n    }\n    if (condition.operator === 'endsWith') {\n      return `'${value}$'`;\n    }\n    if (condition.operator === 'isEmpty' || condition.operator === '!isEmpty') {\n      return '';\n    }\n  }\n  if (isBujiExpression(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return `'${value}'`;\n  }\n  if (typeof value === 'boolean') {\n    return !value ? 0 : 1;\n  }\n  return value;\n}\n\nfunction processConditionSet(conditions, operator, fieldPrefix = '', isForAPI) {\n  return conditions?.map((c) => {\n    if (c.inactive) {\n      return null;\n    }\n    if (c.type !== 'conditionSet') {\n      if (Array.isArray(c.value)) {\n        if (typeof c.value[0] === 'object') {\n          const a = c.value.map(v => {\n            const prefix = v.addFieldPrefix === false ? '' : fieldPrefix;\n            if (v.additionalfields) {\n              const fieldCondition = `${getField(v.field, isForAPI, prefix, v.apiField)} ${getOperator(v.operator, isForAPI)} ${getValue(v.value, isForAPI, c)}`;\n              const additionalFieldsCondition = v.additionalfields.map(f => `${getField(f, isForAPI, prefix)} ${getOperator(v.operator, isForAPI)} ${getValue(v.value, isForAPI, v)}`);\n              return `(${[fieldCondition, additionalFieldsCondition].join(`${v.operator === '=' ? ' and ' : ' or '}`)})`;\n            }\n            return `${getField(v.field, isForAPI, prefix, v.apiField)} ${getOperator(v.operator, isForAPI)} ${getValue(v.value, isForAPI, c)}`;\n          });\n          return a.length === 0 ? '' : `(${a.join(' or ')})`;\n        }\n        if (c.value.length === 0) {\n          if (!isForAPI) {\n            return `${getField(c.field, isForAPI, (c.addFieldPrefix === false ? '' : fieldPrefix))} ${getOperator(c.operator, isForAPI)}`;\n          }\n          return `${getField(c.field, isForAPI, (c.addFieldPrefix === false ? '' : fieldPrefix, c.apiField))} ${getOperator(c.operator, isForAPI)} ''`;\n        }\n        const a = c.value.map(v => `${getField(c.field, isForAPI, (c.addFieldPrefix === false ? '' : fieldPrefix), c.apiField)} ${getOperator(c.operator, isForAPI)} ${getValue(v, isForAPI, c)}`);\n        return a.length === 0 ? '' : `(${a.join(' or ')})`;\n      }\n      return `${getField(c.field, isForAPI, (c.addFieldPrefix === false ? '' : fieldPrefix), c.apiField)} ${getOperator(c.operator, isForAPI)} ${getValue(c.value, isForAPI, c)}`;\n    }\n    const proccessedConditionSet = processConditionSet(c.conditions, c.operator, fieldPrefix, isForAPI);\n    if (proccessedConditionSet) return `(${proccessedConditionSet})`;\n    return '';\n  }).filter(Boolean).join(` ${operator} `);\n}\n\nexport const conditionSetToAPIQuery = (conditionSets) => {\n  const query = processConditionSet(conditionSets.conditions, conditionSets.operator, '', true);\n  if (query && !query.startsWith('(') && !query.endsWith(')')) {\n    return `(${query})`;\n  }\n\n  return query;\n};\n"],"mappings":"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","ignoreList":[]}